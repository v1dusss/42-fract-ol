typedef struct s_master
{
	t_set		set;
	t_fractol	*fract;
	t_px		*px;
	mlx_t		*mlx;
	mlx_image_t	*img;
	int			scale;
	int			iterations;
	int			r;
	int			g;
	int			b;
}				t_master;

# define WINDOW_X 1080
# define WINDOW_Y 720

# define MAX_ITERATIONS 40
# define SCALE 400

# define MANDELBROT_R 100
# define MANDELBROT_G 100
# define MANDELBROT_B 100

# define JULIA_R 100
# define JULIA_G 100
# define JULIA_B 100

# define BURNINGSHIP_R 100
# define BURNINGSHIP_G 100
# define BURNINGSHIP_B 100

void		mandelbrot(t_master *master);
void		julia(t_master *master);
void		buringship(t_master *master);
void		loop_img_mandelbrot(t_master *master);
void		loop_img_julia(t_master *master);
void		loop_img_buringship(t_master *master);
void		key_pres(mlx_key_data_t key_data, void *data);
void		key_pres_julia(t_master *master, mlx_key_data_t key_data);
void		clear_px(t_master *master);
void		clear_fract(char *fract_name, int argc, char **argv, t_master *master);
void		usage(void);
int			map(t_master *master);
int			get_grey(int grey, int a);
int			get_rgb_a(int i, int a, t_master *master);
void		mouseaction(double a, double b, void *params);







	if (master.set == MANDELBROT)
	{
		master.r = MANDELBROT_R;
		master.g = MANDELBROT_G;
		master.b = MANDELBROT_B;
		loop_img_mandelbrot(&master);
	}
	else if (master.set == JULIA)
	{
		master.r = JULIA_R;
		master.g = JULIA_G;
		master.b = JULIA_B;
		loop_img_julia(&master);
	}
	else
	{
		master.r = BURNINGSHIP_R;
		master.g = BURNINGSHIP_G;
		master.b = BURNINGSHIP_B;
		loop_img_buringship(&master);
	}





int	get_rgb_a(int i, int a, t_master *master)
{
	return ((i * master->r) << 24 | (i * master->g) << 16 | (i * master->b) << 8 | a);
}
